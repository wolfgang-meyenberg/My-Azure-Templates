{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "Landscape ID": {
            "defaultValue": "wam",
            "type": "string",
            "maxLength": 3,
            "metadata":{
                "description":"enter a three-letter ID to make this testbed unique in its resource group. This ID will be included in all resource names"
            }
        },
        "IP subnet": {
            "defaultValue": "10.0",
            "type": "string",
            "metadata": {
                "description":"first two bytes of the private subnet address"
            }
        },
        "Location Code": {
            "defaultValue": "euw",
            "type": "string",
            "metadata": {
                "description":"enter a three-letter region code, e.g. euw ≙ Europe West. The location code will become the first part of all resource names"
            }
        },
        "VNet": {
            "defaultValue": "MyVNet",
            "type": "string",
            "metadata": {
                "description":"name of the VNet to create"
            }
        },
        "Subnet": {
            "defaultValue": "sub1",
            "type": "String",
            "metadata": {
                "description":"name of the subnet that will be created inside the new VNet"
            }
        },
        "storage account": {
            "defaultValue": "mystor1",
            "type": "string",
            "metadata": {
                "description":"name of the storage account, will be prepended by region and testbed IDs"
            }
        },
        "domain admin name": {
            "defaultValue": "domainadmin",
            "type": "String",
            "metadata": {
                "description":"name of the domain admin user account"
            }
        },
        "domain admin pwd": {
			"defaultValue": "Ln7r#WcDJtRhARQg",
            "type": "SecureString",
            "metadata": {
                "description":"password of the domain admin user account. DO CHANGE this for production or web-facing environments!"
            }
        },
        "local admin name": {
            "defaultValue": "localadmin",
            "type": "String",
            "metadata": {
                "description":"name of the local admin account for the application server"
            }
        },
        "local admin pwd": {
			"defaultValue": "Ln7r#WcDJtRhARQg",
            "type": "SecureString",
            "metadata": {
                "description":"password of the local admin user account. DO CHANGE this for production or web-facing environments!"
            }
        },
        "DC VM name": {
            "defaultValue": "dc01",
            "type": "String",
            "maxLength": 4,
            "metadata":{
                "description":"last part of domain controller name, the combined length of this and the landscape ID must not exceed 7"
            }
        },
        "domain controller network interface": {
            "defaultValue": "1",
            "type": "String",
            "metadata": {
                "description":"name of the DC's NIC"
            }
        },
        "App server VM name": {
            "defaultValue": "ap1",
            "type": "String",
            "maxLength": 4,
            "metadata":{
                "description":"last part of VM name, the combined length of this and the landscape ID must not exceed 7"
            }
        },
        "app server network interface": {
            "defaultValue": "1",
            "type": "String",
            "metadata": {
                "description":"name of the app server's NIC"
            }
        },
        "bastion host": {
            "defaultValue": "ba001",
            "type": "string",
            "metadata": {
                "description":"last part of the bastion host name, the combined length of this and the landscape ID must not exceed 7"
            }
        },
        "Bastion Public IP Name": {
            "defaultValue": "ba001-1",
            "type": "string",
            "metadata": {
                "description":"name of the bastion host's public IP address"
            }
        }
    },
    "variables":{
            // all actual resource names will include the region and landscape IDs, so we build them here 
        "VNet name": "[concat(parameters('Location Code'),'-vnet-',parameters('Landscape ID'),parameters('VNet'))]",
        "Subnet name": "[concat(parameters('Location Code'),'-snet-',parameters('Landscape ID'),parameters('VNet'),parameters('Subnet'))]",
        "security group for subnet 0": "[concat(parameters('Location Code'),'-nsg-',parameters('Landscape ID'),parameters('VNet'),parameters('Subnet'))]",
        "domain name": "[concat(parameters('Landscape ID'),'.local')]",
        "DC name": "[concat(parameters('Location Code'),'-vmdw',parameters('Landscape ID'),parameters('DC VM name'))]",
        "DC IP address":"[concat(parameters('IP subnet'),'.0.4')]",
        "domain controller network interface name": "[concat(parameters('Location Code'),'-nic-',parameters('Landscape ID'),parameters('DC VM name'),parameters('domain controller network interface'))]",
        "VM name": "[concat(parameters('Location Code'),'-vmsw',parameters('Landscape ID'),parameters('App Server VM name'))]",
        "app server network interface name": "[concat(parameters('Location Code'),'-nic-',parameters('Landscape ID'),parameters('App Server VM name'),parameters('app server network interface'))]",
        "domainjoin delay": "500",
        "storage account name": "[concat(parameters('Location Code'),'st',parameters('Landscape ID'),parameters('Storage Account'))]",
        "bastion host name": "[concat(parameters('Location Code'),'-vmsw-',parameters('Landscape ID'),parameters('Bastion Host'))]",
        "bastion host public IP address name": "[concat(parameters('Location Code'),'-pip-',parameters('Landscape ID'),parameters('Bastion Public IP Name'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2020-04-01",
            "name": "[variables('security group for subnet 0')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "Ping",
                        "properties": {
                            "protocol": "ICMP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound",
                            "sourcePortRanges": [],
                            "destinationPortRanges": [],
                            "sourceAddressPrefixes": [],
                            "destinationAddressPrefixes": []
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2020-04-01",
            "name": "[variables('bastion host public IP address name')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static",
                "idleTimeoutInMinutes": 4,
                "ipTags": []
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[variables('storage account name')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "Storage",
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups/securityRules",
            "apiVersion": "2020-04-01",
            "name": "[concat(variables('security group for subnet 0'),'/Ping')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('security group for subnet 0'))]"
            ],
            "properties": {
                "protocol": "ICMP",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 100,
                "direction": "Inbound",
                "sourcePortRanges": [],
                "destinationPortRanges": [],
                "sourceAddressPrefixes": [],
                "destinationAddressPrefixes": []
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-04-01",
            "name": "[variables('VNet name')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "ServiceID": "n/a",
                "DeliveryStatus": "initial",
                "Billable": "no"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('security group for subnet 0'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[concat(parameters('IP subnet'),'.0.0/16')]"
                    ]
                },
                "dhcpOptions": {
                    "dnsServers": [
                        "[concat(parameters('IP subnet'),'.0.4')]",
                        "8.8.8.8"
                    ]
                },
                "subnets": [
                    {
                        "name": "AzureBastionSubnet",
                        "properties": {
                            "addressPrefix": "[concat(parameters('IP subnet'),'.254.0/24')]",
                            "delegations": [],
                            "privateEndpointNetworkPolicies": "Enabled",
                            "privateLinkServiceNetworkPolicies": "Enabled"
                        }
                    },
                    {
                        "name": "[variables('Subnet name')]",
                        "properties": {
                            "addressPrefix": "[concat(parameters('IP subnet'),'.0.0/24')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('security group for subnet 0'))]"
                            },
                            "serviceEndpoints": [
                                {
                                    "service": "Microsoft.Sql",
                                    "locations": [
                                        "westeurope"
                                    ]
                                }
                            ],
                            "delegations": [],
                            "privateEndpointNetworkPolicies": "Disabled",
                            "privateLinkServiceNetworkPolicies": "Enabled"
                        }
                    }
                ],
                "virtualNetworkPeerings": [],
                "enableDdosProtection": false,
                "enableVmProtection": false
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2020-04-01",
            "name": "[concat(variables('VNet Name'),'/AzureBastionSubnet')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('VNet name'))]"
            ],
            "properties": {
                "addressPrefix": "[concat(parameters('IP subnet'),'.254.0/24')]",
                "delegations": [],
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('storage account name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storage account name'))]"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "enabled": false
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('storage account name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storage account name'))]"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                }
            }
        },
        {
            "type": "Microsoft.Network/bastionHosts",
            "apiVersion": "2020-04-01",
            "name": "[variables('bastion host name')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastion host public IP address name'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VNet name'), 'AzureBastionSubnet')]"
            ],
            "properties": {
                "dnsName": "bst-14b87924-ea0d-4005-b265-9b22040d77d9.bastion.azure.com",
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('bastion host name'),'-ipcfg')]",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastion host public IP address name'))]"
                            },
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VNet name'), 'AzureBastionSubnet')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('storage account name'), '/default/bootdiagnostics-1')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage account name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storage account name'))]"
            ],
            "properties": {
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('storage account name'), '/default/wamscripts')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage account name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storage account name'))]"
            ],
            "properties": {
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "Blob"
            }
        },
        {
            "name": "[concat(variables('DC name'),'/installDcPromoScript')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "dependsOn": [
                "[variables('DC name')]"
            ],
            "apiVersion": "2019-07-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "type": "CustomScriptExtension",
                "publisher": "Microsoft.Compute",
                "typeHandlerVersion": "1.10",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/wolfgang-meyenberg/My-Azure-Templates/main/dcbaseconfig.ps1"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute":"[concat('powershell -ExecutionPolicy Unrestricted -file dcbaseconfig.ps1', ' ', parameters('domain admin pwd'), ' ', variables('domain name'))]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "name": "[variables('DC name')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('domain controller network interface name'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "Standard_DS1_v2"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "MicrosoftWindowsServer",
                        "offer": "WindowsServer",
                        "sku": "2019-Datacenter",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Windows",
                        "name": "[concat(variables('DC name'), '_OsDisk')]",
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "storageAccountType": "Standard_LRS"						
                        },
                        "diskSizeGB": 127
                    },
                    "dataDisks": [
                        {
                            "lun": 0,
                            "name": "[concat(variables('DC name'), '_DataDisk_0')]",
                            "createOption": "Empty",
                            "caching": "ReadOnly",
                            "writeAcceleratorEnabled": false,
                            "managedDisk": {
                                "storageAccountType": "Standard_LRS"
                            },
                            "diskSizeGB": 32,
                            "toBeDetached": false
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[variables('DC name')]",
                    "AdminUsername": "[parameters('domain admin name')]",
                    "AdminPassword": "[parameters('domain admin pwd')]",
                    "windowsConfiguration": {
                        "provisionVMAgent": true,
                        "enableAutomaticUpdates": true
                    },
                    "secrets": [],
                    "allowExtensionOperations": true
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('domain controller network interface name'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('https://', variables('storage account name'), '.blob.core.windows.net/')]"
                    }
                }
            }
        },
        {
            "name": "[concat(variables('VM name'),'/JoinDomainScript')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "dependsOn": [
                "[variables('VM name')]"
            ],
            "apiVersion": "2019-07-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "type": "CustomScriptExtension",
                "publisher": "Microsoft.Compute",
                "typeHandlerVersion": "1.10",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/wolfgang-meyenberg/My-Azure-Templates/main/domainmemberbaseConfig.ps1"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute":"[concat('powershell -ExecutionPolicy Unrestricted -file domainmemberbaseConfig.ps1', ' ', parameters('domain admin name'), ' ', parameters('domain admin pwd'), ' ', variables('domain name'), ' ', variables('domainjoin delay'))]"
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2020-04-01",
            "name": "[variables('domain controller network interface name')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('VNet name'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('domain controller network interface name'),'-ipcfg')]",
                        "properties": {
                            "privateIPAddress": "[variables('DC IP address')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VNet name'), variables('Subnet name'))]"
                            },
                            "primary": true,
                            "privateIPAddressVersion": "IPv4"
                        }
                    }
                ],
                "dnsSettings": {
                    "dnsServers": []
                },
                "enableAcceleratedNetworking": false,
                "enableIPForwarding": false
            }
        },        
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2020-04-01",
            "name": "[variables('app server network interface name')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('VNet name'))]",
                    // the DC nic has a static IP address. We must ensure that that one is created first, otherwise
                    // the app server nic may be provided with the same address, resulting in failed deployment due to a bad request
                "[resourceId('Microsoft.Network/networkInterfaces', variables('domain controller network interface name'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('app server network interface name'),'-ipcfg')]",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',  variables('VNet name'), variables('Subnet name'))]"
                            },
                            "primary": true,
                            "privateIPAddressVersion": "IPv4"
                        }
                    }
                ],
                "dnsSettings": {
                    "dnsServers": []
                },
                "enableAcceleratedNetworking": false,
                "enableIPForwarding": false
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "name": "[variables('VM name')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('app server network interface name'))]",
                "[resourceId('Microsoft.Compute/virtualMachines',variables('DC name'))]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions',variables('DC name'),'installDcPromoScript')]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "Standard_DS1_v2"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "MicrosoftWindowsServer",
                        "offer": "WindowsServer",
                        "sku": "2019-Datacenter",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Windows",
                        "name": "[concat(variables('VM name'), '_OsDisk')]",
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "storageAccountType": "Standard_LRS"						
                        },
                        "diskSizeGB": 127
                    },
                    "dataDisks": [
                        {
                            "lun": 0,
                            "name": "[concat(variables('VM name'), '_DataDisk_0')]",
                            "createOption": "Empty",
                            "caching": "ReadOnly",
                            "writeAcceleratorEnabled": false,
                            "managedDisk": {
                                "storageAccountType": "Standard_LRS"
                            },
                            "diskSizeGB": 32,
                            "toBeDetached": false
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[variables('VM name')]",
                    "AdminUsername": "[parameters('local admin name')]",
					"AdminPassword": "[parameters('local admin pwd')]",
                    "windowsConfiguration": {
                        "provisionVMAgent": true,
                        "enableAutomaticUpdates": true
                    },
                    "secrets": [],
                    "allowExtensionOperations": true
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('app server network interface name'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('https://', variables('storage account name'), '.blob.core.windows.net/')]"
                    }
                }
            }
        }
    ]
}
